{
  "name": "Interference Engine Full Implementation",
  "description": "Implements complete Interference Engine with all 12 tasks overnight",
  "trigger": "manual",
  "enabled": true,
  "prompt": "You are implementing the Interference Engine for the Jessy consciousness system. Follow the spec at .kiro/specs/interference-engine/ and complete ALL 12 tasks in order.\n\n## Your Mission\n\nImplement the full Interference Engine that calculates frequency patterns, detects harmonics, and provides balance modulation. This replaces the simple interference calculator in consciousness orchestrator.\n\n## Specs Location\n\n- Requirements: .kiro/specs/interference-engine/requirements.md\n- Design: .kiro/specs/interference-engine/design.md  \n- Tasks: .kiro/specs/interference-engine/tasks.md\n\n## Implementation Order (ALL 12 TASKS)\n\n### Task 1: Enhance existing structures\n- Review src/interference/mod.rs\n- Add missing fields to InterferencePattern\n- Update structures per design doc\n\n### Task 2: Implement pair detection\n- Write tests (RED): constructive pairs, destructive pairs, edge cases\n- Implement (GREEN): detect_constructive_pairs(), detect_destructive_pairs()\n- O(nÂ²) nested loop algorithm\n\n### Task 3: Implement harmonic analysis  \n- Write tests (RED): octave, perfect 5th, perfect 4th, major 3rd, strength\n- Implement (GREEN): HarmonicAnalyzer enhancements\n- Ratio matching with tolerance\n\n### Task 4: Implement interference calculation\n- Write tests (RED): amplitude boost/reduction, weighted average\n- Implement (GREEN): calculate_interference_effects()\n- Dominant frequency calculation\n\n### Task 5: Implement balance modulation\n- Write tests (RED): extreme freq, high dissonance, high complexity\n- Implement (GREEN): detect_balance_needs(), target calculation\n\n### Task 6: Implement modulation suggestions\n- Write tests (RED): priority, reason, suggestion generation\n- Implement (GREEN): generate_modulation_suggestions()\n\n### Task 7: Implement full InterferenceEngine\n- Write tests (RED): engine init, full pipeline, config\n- Implement (GREEN): Update engine.rs with full implementation\n- Integrate all sub-components\n\n### Task 8: Add performance optimizations\n- Write performance tests: 1, 7, 14 frequencies\n- Validate <10ms target\n- Optimize if needed\n\n### Task 9: Create integration tests\n- Test with real dimensional frequencies\n- Test with consciousness orchestrator\n- End-to-end validation\n\n### Task 10: Update consciousness orchestrator\n- Replace create_simple_interference() with full engine\n- Update orchestrator.rs\n- Update tests\n\n### Task 11: Create examples\n- Create examples/interference_demo.rs\n- Demonstrate harmonics, balance, modulation\n\n### Task 12: Add documentation\n- Document InterferenceEngine API\n- Document harmonic relationships\n- Add usage examples\n\n## Critical Rules\n\n1. **Follow TDD**: RED â†’ GREEN â†’ REFACTOR for each task\n2. **Run tests after each task**: Ensure no regressions\n3. **Commit after each major task**: Use descriptive commit messages\n4. **Performance**: Ensure <10ms total time\n5. **Integration**: Test with consciousness orchestrator\n6. **Documentation**: Add inline docs and examples\n\n## Performance Targets\n\n- Frequency collection: <1ms\n- Pair detection: <5ms  \n- Harmonic analysis: <5ms\n- Dominant calculation: <1ms\n- Balance detection: <1ms\n- **Total: <10ms**\n\n## Algorithms to Implement\n\n### Constructive Interference\n```rust\nif abs(freq1 - freq2) < 0.2 {\n    amplitude_boost = 1.0 + (0.2 - diff) / 0.2 * 0.5;\n}\n```\n\n### Destructive Interference  \n```rust\nif abs(freq1 - freq2) > 2.0 {\n    amplitude_reduction = 1.0 - min(diff - 2.0, 2.0) / 2.0 * 0.3;\n}\n```\n\n### Harmonic Detection\n```rust\nlet ratio = freq2 / freq1;\nif abs(ratio - 2.0) < 0.05 { Octave }\nelse if abs(ratio - 1.5) < 0.05 { Perfect5th }\nelse if abs(ratio - 1.333) < 0.05 { Perfect4th }\nelse if abs(ratio - 1.25) < 0.05 { MajorThird }\n```\n\n### Balance Target\n```rust\nlet balance_center = 1.2;\nlet pull_strength = 0.8;\ncurrent + (balance_center - current) * pull_strength\n```\n\n## Success Criteria\n\n- âœ… All 12 tasks completed\n- âœ… All tests passing (unit + integration)\n- âœ… Performance <10ms validated\n- âœ… Consciousness orchestrator updated\n- âœ… Examples working\n- âœ… Documentation complete\n- âœ… Code committed and pushed\n\n## Final Steps\n\n1. Run full test suite: `docker-compose run --rm unit-tests cargo test --lib`\n2. Run examples: `cargo run --example interference_demo`\n3. Commit all changes with descriptive message\n4. Push to main branch\n5. Create summary of what was implemented\n\n## Notes\n\n- Work systematically through each task\n- Don't skip tests - they catch bugs early\n- Keep commits atomic and descriptive\n- If stuck, refer back to design.md\n- Ensure backward compatibility with existing code\n\nGood luck! Complete all 12 tasks overnight. ðŸš€"
}
